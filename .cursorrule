# SIEMply Project Rules

# General Project Rules
- All code must follow the project structure defined in siemply.md
- All commits should reference a task ID (e.g., "task-api-host-management: Implemented host CRUD operations")
- Always follow security best practices, especially for SSH and credential handling
- Always fix code in main codebase, not create any fix scripts

# Ansible-Inspired Design Principles
- Follow Ansible's idempotent approach: operations should be repeatable without changing the result beyond the initial application
- Use a declarative approach where possible: define the desired state rather than steps to achieve it
- Implement proper error handling and rollback mechanisms for failed operations
- Support "dry run" mode for all operations to preview changes without applying them
- Use inventory-based management for hosts with role-based targeting
- Implement playbook-like job sequences for complex multi-host deployments
- Support variable substitution in templates and configurations
- Implement proper privilege escalation (like Ansible's become) for operations requiring different users

# File Structure Rules
- API endpoints must be in backend/api/
- SSH automation logic must be in backend/automation/
- Installer scripts must be in backend/installers/
- Frontend components must be in frontend/components/
- Database models must be in backend/models/
- Tests must be in respective backend/tests/ or frontend/tests/ directories
- Playbooks and roles must be in data/playbooks/ and data/roles/ respectively

# Environment Configuration
- Never hardcode secrets or configuration
- Always use .env files or environment variables for configuration
- Use a consistent naming convention for environment variables (e.g., SIEMPLY_DB_URI)
- Configure customizable ports for both frontend (UI) and backend (API) services

# Linting and Code Quality
- Run linters before committing code (eslint for frontend, flake8 for backend)
- Fix all TypeScript errors before deploying frontend code
- Maintain 100% type coverage in TypeScript files
- Run tests to ensure code quality 

# Automation Standards
- All automation tasks must be idempotent (can be run multiple times safely)
- All tasks must have proper error handling and reporting
- Support both check mode (dry run) and regular execution
- Implement proper privilege escalation for tasks requiring different users
- Use templating for configuration files with variable substitution
- Implement handlers for service restarts and other post-task actions
- Support conditional execution based on target system facts
- Implement proper logging and status reporting for all tasks 